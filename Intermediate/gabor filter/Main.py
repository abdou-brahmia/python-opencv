# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import  QFileDialog

import matplotlib.pyplot as plt
import numpy as np
import cv2
from multiprocessing.pool import ThreadPool
import timeit
import os

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(460, 390)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 20, 200, 200))
        self.label.setText("")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(240, 20, 200, 200))
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")

        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(50, 280, 90, 30))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(50, 330, 90, 30))
        self.pushButton_2.setObjectName("pushButton_2")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(160, 280, 280, 80))
        self.textBrowser.setObjectName("textBrowser")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(0, 250, 460, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 470, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


        self.pushButton.clicked.connect(self.load)
        self.pushButton_2.clicked.connect(self.run)
        self.imgPath=""

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "Load Image"))
        self.pushButton_2.setText(_translate("MainWindow", "Run"))



    def build_filters(self):
        filters = []
        ksize = 31
        for theta in np.arange(0, np.pi, np.pi / 16):
            kern = cv2.getGaborKernel((ksize, ksize),
                                      4.0, 
                                      theta,
                                      10.0,
                                      0.5,
                                      0,
                                      ktype=cv2.CV_32F)
            kern /= 1.5*kern.sum()
            filters.append(kern)
            
            
        return filters


    def process(self,img, filters):
        start = timeit.default_timer()

        accum = np.zeros_like(img)
        for kern in filters:
            fimg = cv2.filter2D(img, cv2.CV_8UC3, kern)
            np.maximum(accum, fimg, accum)
        
        stop = timeit.default_timer()
        self.textBrowser.append('Time used in simple process : '+str( stop - start)+' seconds ')  

        return accum


    def process_with_threads(self,img, filters, threadn = 8):
        start = timeit.default_timer()
        accum = np.zeros_like(img)
        def f(kern):
            return cv2.filter2D(img, cv2.CV_8UC3, kern)
        pool = ThreadPool(processes=threadn)
        for fimg in pool.imap_unordered(f, filters):
            np.maximum(accum, fimg, accum)

        stop = timeit.default_timer()
        self.textBrowser.append('Time used in threaded process : '+str(stop - start)+' seconds ')  

        return accum

    def display_filters(self,filters):
        
        f, axarr = plt.subplots(4,4 , figsize=(11,11))
        for i in range (0,4):
            for j in range(0,4):
                filtre=filters[j+i*3]
                axarr[i,j].imshow(filtre, cmap='gray')
        plt.show()
        
    def display_res(self,img,res1,res2):
        f2, axarr2 = plt.subplots(1,3 , figsize=(11, 3))
        axarr2[0].imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB), cmap='gray')
        axarr2[1].imshow(cv2.cvtColor(res1, cv2.COLOR_BGR2RGB), cmap='gray')
        axarr2[2].imshow(cv2.cvtColor(res2, cv2.COLOR_BGR2RGB), cmap='gray')
        plt.show()
        

    
    def affiche(self,image,var):

        image_temp=cv2.cvtColor(image,cv2.COLOR_BGR2RGB) 
        height, width, channels = image_temp.shape
        bytesPerLine = channels * width
        qImg = QtGui.QImage(image_temp.data, width, height, bytesPerLine, QtGui.QImage.Format_RGB888)
        pixmap01 = QtGui.QPixmap.fromImage(qImg)
        pixmap_image = QtGui.QPixmap(pixmap01)

        if var==1:
            
            self.label.setPixmap(pixmap_image)
            self.label.setScaledContents(True)

        elif var==2:
            
            self.label_2.setPixmap(pixmap_image)
            self.label_2.setScaledContents(True)

    def load(self):
        options = QFileDialog.Options()
        fileName, _ = QFileDialog.getOpenFileName(None, 'QFileDialog.getOpenFileName()',os.path.abspath(os.getcwd()),'Images (*.png *.jpeg *.jpg *.bmp *.gif)', options=options)
        self.imgPath = fileName
        self.img = cv2.imread(self.imgPath)
        if self.img is None:
            self.textBrowser.clear()
            self.textBrowser.append('Failed to load image file')
        else:
            self.affiche(self.img,1)
            self.textBrowser.clear()
            self.textBrowser.append(' load image avec succe ')

    def run(self):

        filters = self.build_filters()
        #res1 = self.process(self.img, filters)
        res2 = self.process_with_threads(self.img, filters)
        
        self.affiche(res2,2)
        self.textBrowser.append('on a  '+str(len(filters))+' filters etuliser')

     

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
